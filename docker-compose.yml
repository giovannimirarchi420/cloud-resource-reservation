services:
  # Frontend React application
  frontend:
    image: node:19-alpine
    container_name: reservation-frontend
    working_dir: /app
    volumes:
      - ./reservation-fe:/app
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm start"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://backend:8080/api
      - REACT_APP_KEYCLOAK_URL=http://keycloak:8180
      - REACT_APP_KEYCLOAK_REALM=resource-management
      - REACT_APP_KEYCLOAK_CLIENT_ID=resource-management-app
    depends_on:
      - backend
      - keycloak
    networks:
      - reservation-network

  # Backend service
  backend:
    image: eclipse-temurin:23-jdk
    container_name: reservation-backend
    working_dir: /app
    volumes:
      - ./reservation-be:/app
    ports:
      - "8080:8080"
    command: sh -c "./mvnw spring-boot:run -Dspring-boot.run.profiles=test -Ptest"
    environment:
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8180
      - KEYCLOAK_REALM=resource-management
      - KEYCLOAK_CLIENT_ID=reservation-backend
      - KEYCLOAK_CLIENT_SECRET=SAoFYQ94ek3EfyPWMkdMglo6Ga1yxQSb
      - FRONTEND_APP_URL=http://frontend:3000
      - SERVER_PORT=8080
      - DB_URL=jdbc:postgresql://postgres:5432/reservation_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      - postgres
      - keycloak
    networks:
      - reservation-network

  # Reservation Event Processor
  event-processor:
    build:
      context: ./reservation-event-processor
      args:
        DB_TYPE: postgres # Use postgres for the test environment
    container_name: reservation-event-processor
    environment:
      # SPRING_PROFILES_ACTIVE is set to 'pro,postgres' in the Dockerfile via ENV
      - DB_URL=jdbc:postgresql://postgres:5432/reservation_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8180
      - KEYCLOAK_REALM=resource-management
      - KEYCLOAK_CLIENT_ID=reservation-event-processor
      - KEYCLOAK_CLIENT_SECRET=jNEhUZ4uYRUGCRUtbZ5OPPq7XVGyy3tQ
      - SERVER_PORT=8081
    ports:
      - "8081:8081" # Expose the event processor's port
    depends_on:
      - postgres
    networks:
      - reservation-network

  # PostgreSQL database for both Keycloak and Backend
  postgres:
    image: postgres:15-alpine
    container_name: reservation-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=keycloak
      - POSTGRES_MULTIPLE_DATABASES=reservation_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-postgres-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-postgres-dbs.sh
    entrypoint: >
      bash -c "
        chmod +x /docker-entrypoint-initdb.d/init-multiple-postgres-dbs.sh
        docker-entrypoint.sh postgres
      "
    ports:
      - "5432:5432"
    networks:
      - reservation-network

  # Keycloak service
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: reservation-keycloak
    command:
      - start-dev
      - --import-realm
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HOSTNAME=keycloak
      - KC_HTTP_PORT=8180
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import
    ports:
      - "8180:8180"
    depends_on:
      - postgres
    networks:
      - reservation-network

  # Test Webhook Client
  # This service is used to test the webhook functionality, you can configure it from the UI
  # Use the following URL: http://webhook-client:8000/test/
  webhook-client:
    build: ./webhook-client
    container_name: test-webhook-client
    ports:
      - "8000:8000"
    volumes:
      - ./webhook-client:/app
    networks:
      - reservation-network

networks:
  reservation-network:
    driver: bridge

volumes:
  postgres_data: